webpack .\src\main.js -o .\dist\bundle.js   用webpack 打包 后门是 入口文件  出口文件

npm i webpack-dev-server -D 实现自动打包编译功能

webpack-dev-server 想要正常运行，必须强制安装本地webpack  注意：全局webpack没用

在main.js文件中 package.js 中 "dev": "webpack-dev-server --open --port 3000" 后面
参数--open中的作用是自动打开 --port 3000 是引用3000端口号


npm run dev 托管到内存，不在本地硬盘上

npm i html-webpack-plugin -D 把本地html托管到内存

只要是插件就要放到plugins结点中去

当使用 html-webpack-plugin 插件之后我们不需要再手动处理 bundle.js 的文件， 因为这个插件，已经
帮我们自动创建了一个合适的 script， 并且引用了正确的路径

cnpm i html-webpack-plugin 两个作用: 1.自动在内存中根据指定页面生成一个内存的页面
                   
                                     2.自动把打包好的bundle.js插入我们页面中去

webpack, 默认只能打包处理 JS 类型的文件，无法处理其他的非JS类型的文件，如果要处理非js类型的文件，我们需要手动安装合适的第三方Loader加载器

要打包css文件 需要安装 cnpm i style-loader css-loader -D 打开webpack.config.js 这个配置文件，新增一个个配置结点叫module,它是一个对象，上面有
rules属性，且为数组，存放了所有第三方文件的匹配和处理规则。

webpack 处理第三方文件类型的过程：
 1.发现这个要处理的文件不是js文件，然后就去配置文件中，查找配置文件中有没有对应的第三方loader规则
 2.找到了就会调用loader处理这种文件类型
 3.调用loader的顺序是从后往前调用
 4.当调用完最后一个loader 会把处理的结果集交给webpack进行打包合并，最终输出到bundle.js中去

打包less文件终端安装 cnpm i less-loader -D   和 cnpm i less -D 然后在webpack.config.js的module的rules里面配置
默认情况下，webpack无法处理css文件中的URL地址,不管是图片还是字体库所有终端装loader ('cnpm i url-loader file-loader -D')
在配置文件配置（类似于css的配置 test use） {test: /\.(jpg|png|gif|bmp|jpeg)/, use: 'url-loader?limit=7631&name=[hash:8].[name].[ext]'}
limit是给定的值，如果图片byte大于或等于这个参数,则不会被转为base64的字符串，否则会被转为base64的字符串 name参数表示之前图片叫什么名,现在也叫什么名,加[hash:8]是
为了解决不同文件夹下图片重名问题
webpack使用Vue 
  1.首先装包 安装的命令  ('cnpm i vue -S')
  2.为了解析vue模板，我们需要安装Loader  ('cnpm i vue-loader vue-template-compiler -D')
  3.在main.js文件中 导入vue (import Vue from 'vue')
  4.定义vue组件
  5.配置插件:   const VueLoaderPlugin = require('vue-loader/lib/plugin');
  6. 在配置文件里面加入:
     plugins: [
       new VueLoaderPlugin() 
  ], 
  module: {
    rules:[
      {test: /\.vue$/, use: 'vue-loader'}
    ]
  },
  5.用import导入这个组件
  6.创建vue实例
  7.页面中创建div为app的id




复习:
webpack作用:
     1.通过入口将所有依赖关系打包成静态资源
     2.可以做的事: 代码转换，代码分割， 模块合并，自动刷新，代码校验，自动发布
第一步: 终端运行: npm init -y   管理起来  会生成包管理文件package.json
第二步: cnpm install webpack --save-dev  安装webpack
第三步: cnpm install webpack-cli --save  安装webpack-cli
第四步: 新建一个webpack.config.js配置文件用来配置入口出口，或者第三方包的文件（到这里就可以运行webpack命令，在dist文件下面生成bundle.js文件）
  const path = require('path')
  const webpack = require('webpack')
  const config = {
	entry:{
		main:'./src/main.js',
	},
	output: {
		filename: 'bundle.js',
		path: __dirname + '/dist',
	},
	mode: 'development',
  };
  module.exports = config;
  以上为初始配置代码。
第三步: cnpm i webpack-dev-server -D  这个工具帮助我们自动打包，不需要改动一点就webpack一下
第五步: 在package.json的文件"scripts" 的 'test' 下边里边加一个 "dev": "webpack-dev-server" ,在"webpack-dev-server"里面可以加参数
   参数a: --open自动打开
   参数b: --port 3000 打开的端口号
   参数c: --contentBase src 进来就打开src目录，作为默认的打开目录
   参数d: --hot 热更新
   注: 此时运行npm run dev 但是会在控制台报错，因为引入main.js文件位置被放在了根目录,因此解决办法有两种:
      解法一: 将index.html文件里面<script src="..."> src里面的路径改为根路径 src="/bundle.js"
      解法二: 终端安装 cnpm i html-webpack-plugin -D 命令,然后在配置文件(webpack.config.js)里面 加 const htmlWebpackPlugin = require('html-webpack-plugin')
          注: 一般用解法二,解法二的作用: 在内存中，根据指定的模板页面，生成一份内存中的页面，同时把bundle.js注入页面底部
              如果要配置插件，就要在导出对象（module.exports）中挂载一个plugins 节点,这个结点是配置所有webpack 插件的
              plugins: [
                new htmlWebpackPlugin({
                  template: path.join(__dirname,'./src/index.html'),
                  filename: 'index.html'
                })
               ]
第六步: 6.1 引入css样式
    a. 首先在main.js里面导入 import './css/index.css'
    b. 下载loader 终端运行 "cnpm i style-loader css-loader -D"
    c. 在配置文件(webpack.config.js)里面配置节点 module:{}  这个节点就是配置所有第三方模块的节点  在module:{}里面有 rules:[{}] 这个匹配规则
       rules:[
         {test : /\.css$/, use:['style-loader', 'css-loader']}
           ]
       
       6.2 引入less样式
    a. 首先在main.js里面导入 import './css/index.css'    (自创的css包)
    b. 下载loader 终端运行 "cnpm i less-loader less -D"
    c. 在配置文件(webpack.config.js)里面配置节点 module:{}  这个节点就是配置所有第三方模块的节点  在module:{}里面有 rules:[{}] 这个匹配规则
       rules:[
         {test : /\.less$/, use:['style-loader', 'css-loader', 'less-loader']}
           ]
       6.3 引入scss样式
    a. 首先在main.js里面导入 import './css/index.scss'
    b. 下载loader 终端运行 "cnpm i sass-loader node-sass -D"
    c. 在配置文件(webpack.config.js)里面配置节点 module:{}  这个节点就是配置所有第三方模块的节点  在module:{}里面有 rules:[{}] 这个匹配规则
       rules:[
         {test : /\.scss$/, use:['style-loader', 'css-loader', 'sass-loader']}
           ]
知识点一:
    在默认情况下，webpack无法处理css文件中的URL地址,不管是图片还是字体库所有终端装url-loader ('cnpm i url-loader file-loader -D')
    在配置文件配置（类似于css的配置 test use） {test: /\.(jpg|png|gif|bmp|jpeg)/, use: 'url-loader?limit=7631&name=[hash:8].[name].[ext]'}
    limit是给定的值，如果图片byte大于或等于这个参数,则不会被转为base64的字符串，否则会被转为base64的字符串 name参数表示之前图片叫什么名,现在也叫什么名
    ,加[hash:8]是
    为了解决不同文件夹下图片重名问题
知识点二:
    装bootstrap 终端（‘cnpm i bootstrap -S’）
    导入:  import 'bootstrap/dist/css/bootstrap.css'

知识点三:
    通过babel可将es6高级语法转为低级语法
       1.安装babel需要安装两套包,去安装babel的loader功能
         1.1 第一套包: ('cnpm i babel-core babel-loader babel-plugin-transform-runtime -D')
         1.2 第二套包: ('cnpm i babel-preset-env babel-preset-stage-0 -D')
       2.打开webpack配置文件，在module 节点下的rules数组中，添加新的匹配规则:
         2.1 {test: /.\js$/, use: 'label-loader', exclude: /node_modules/}
         2.2 在配置babel 的loader 规则的时候，必须把node_modules 的文件通过exclude排除掉，原因如下:
            2.2.1 打包速度非常慢
            2.2.2 就算全部加载完毕了，项目也无法运行
       3.在根目录下新建一个 .babelrc 的babel配置文件 这个配置文件属于JSON文件 所以要符合JSON书写规范: a.不能写注释 b.字符串必须用双引号
          3.1 在babelrc 写如下配置:  (presets可以看做是语法的意思, plugins可以看做插件的意思)
             {
               "presets": ["env","stage-0"],
               "plugins": ["transform-runtime"]
             }
知识点四: 
      cnpm i vue -S
      默认webpack无法打包 .vue的包,先装（‘cnpm i vue -S’）然后安装相关loader  安装的命令 ('cnpm i vue-loader vue-template-compiler -D')
      在配置文件里面:
      module: {
        rules:[
          {test: '\.vue$', use: 'vue-loader'}
        ]
      },
  mode: 'development'
}

配置文件里面加入:
   const VueLoaderPlugin = require('vue-loader/lib/plugin');
    plugins: [
       new VueLoaderPlugin() 
  ], 
ES6中，通过export default 向外暴露成员
通过 import 模块名 from '模块标识符导入成员
在node中，导入成员用 const 成员 = require('模块标识符');
暴露成员用: module.export
在一个模块中，只允许export default向外暴露一次,但是export可以暴露多个,按名称导入,可以用as别名

知识点五(路由):
  安装('cnpm i vue-router -S')
  导入包，安装包
            import VueRouter from 'vue-router'
            Vue.use(VueRouter)
  导入组件包：
  import VueRouter from 'vue-router'
  import account from './main/Account'
  import goodslist from './main/GoodsList'
  再配路由:
      var router = new VueRouter({
    routes: [
      {path: '/account', component: account},
      {path: '/goodslist', conponent: goodslist }  
    ]
  })
  然后把router挂载到vm实例中(很关键)
  配置子路由不带 "/"

对于样式而言：
  如果想启用scss或less需要style元素设置lang属性
  样式 scoped 通过 css 的属性选择器实现的
  运用Mint-UI：
      先安装包： （‘cnpm i mint-ui -S’）
      然后导入包: 
        import Mint from 'mint-ui';
        Vue.use(Mint);

   
